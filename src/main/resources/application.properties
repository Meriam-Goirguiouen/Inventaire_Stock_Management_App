# ===============================================
# CONFIGURATION DE LA SOURCE DE DONN\u00c3\u0089ES (DataSource)
# ===============================================

# URL de connexion \u00c3\u00a0 votre base de donn\u00c3\u00a9es MySQL
# Le nom de votre BD est 'inventairestockdb'
spring.datasource.url=jdbc:mysql://localhost:3306/inventairestockdb?serverTimezone=UTC

spring.datasource.username=root
spring.datasource.password=


# ===============================================
# CONFIGURATION DE HIBERNATE (JPA)
# ===============================================

# 'update' va v\u00c3\u00a9rifier si les tables correspondent \u00c3\u00a0 vos entit\u00c3\u00a9s Java et les mettra \u00c3\u00a0 jour si besoin.
# Comme vos tables existent d\u00c3\u00a9j\u00c3\u00a0, c'est une bonne option.
spring.jpa.hibernate.ddl-auto=update

# Affiche les requ\u00c3\u00aates SQL g\u00c3\u00a9n\u00c3\u00a9r\u00c3\u00a9es par Hibernate dans la console
spring.jpa.show-sql=true

# Formate joliment les requ\u00c3\u00aates SQL affich\u00c3\u00a9es
spring.jpa.properties.hibernate.format_sql=true


# ===============================================
# CONFIGURATION DU BROKER JMS (ARTEMIS)
# ===============================================

# Ces lignes sont pour que l'app se connecte au broker que vous avez lanc\u00c3\u00a9
spring.artemis.mode=native
spring.artemis.broker-url=tcp://localhost:61616
spring.artemis.user=admin
spring.artemis.password=admin

# On dit \u00c3\u00a0 Spring JMS d'utiliser des "queues" par d\u00c3\u00a9faut
spring.jms.pub-sub-domain=false
spring.application.name=demo
#app.notifications.enabled=false

